We thank the reviewers for their detailed and constructive feedback. Below we first address general issues raised by several reviewers and then individual comments.

### General Comments:

* **Comparison with FA-based solvers. More insight into why the PFA-based approach is better. (ReviewerB,C)**
 
> *In principle, we can extend FA to support string-number conversion*, but PFA is much more efficient. PFA is labeled by integer variables that can be used directly in flattening. In FA, this would require multiple if-then-else statements (e.g., saying that if a transition labeled '0' is taken, then the corresponding number is 0), which introduces a significant amount of additional predicates that the DPLL engine needs to decide their value. We have confirmed this in our preliminary experiment.

> *PFA is also more efficient than FA when solving other string constraints.* 
When dealing with large alphabets such as Unicode (>6000 symbols), one PFA transition may correspond to >6000 FA transitions.

> *The existing FA-based tool, Trau, does not support string-number conversion.* The implementation of Trau is done by **substituting** the string solver of Z3 with a completely new one that does not implement string-number conversion. Adding such support requires a considerable amount of coding (not just by enabling Z3 features). Z3-PFA is generally better than Trau on basic string constraints benchmarks. 

* **Provide more support to the hardness of string-number conversion is difficult. (ReviewerB,C)**

> Firstly, it is witnessed by our experimental results. 

> The straightforward extension of existing FA based techniques boils down to solving the satisfiability problem of integer polynomial-exponential constraints, whose decidability is still open (Section 8).  The need for using multiple if-then-else statements causes efficiency issues.
	 
* **How to decide the structure of PFA used by the solvers? (ReviewerB,D)**	 

> We describe the automatic PFA selection strategy of Z3-PFA in the 2nd paragraph of Section 9. 

* **The selection of timeout for the evaluation.(ReviewerA,C)** 

> Table 1 and 2 have many instances so that a 120s timeout would require days to reproduce the result for artifact evaluation. In our evaluation, using different timeout will not alter the overall trend.


* **Break down the X results in the experiments further. Did you find uncovered bugs in some of the solvers? If yes, why does it happen? (ReviewerA,C)**

> We did find cases where existing solvers provide incorrect answers, but we can only guess what the reasons are. We have checked the source code of Z3. One possible reason we found is that when both n and x in the constraint n=toNum(x) are variables, Z3 *over-approximates* the toNum(x) function with an uninterpreted function, with additional axioms like toStr(toNum(x))=x. 

### Reviewer A:

* **Comparison with DPLL-based solvers**

> To the best of our knowledge, Z3 and CVC4 are DPLL(T)-based string solvers that are well-known and still well-maintained. 
Most SAT-based string solvers such as Hampi and Kazula are no longer maintained.


### Reviewer B:

* **The significance of introducing string-number conversion?**

> JavaScript makes far more use of such conversions than other languages. Every access to the state of any modeled object relies on it since array indices get converted to strings (see lines 150-200 of the submission). Since JavaScript is pervasive, handling string-number conversion is very important.
	  
### Reviewer C:
	 
* **Converted the function *checkLuhn* into C, and find out KLEE works fine**

> Converting *checkLuhn* into C code will alter its semantics substantially. The function makes use of array accesses through calls of charAt() which in JavaScript requires string-number conversion, because arrays are indexed with *strings*.
	 
* **Compare with PASS in your evaluation**
	 
> PASS uses quantified formulae over arrays with symbolic length to encode string constraints, and a specialized quantifier elimination to solve them. Though it differs from our approach significantly and handling the quantification is expensive, PASS is indeed similar in how finite automata and string-number conversion constraints are translated to formulae. We will add a discussion to the related work. The authors informed us that PASS is no longer maintained and is not open-source.

* **How you construct a PFA that is aware of the domain of a constraint?**

> We assume all numbers are decimal following the SMTLIB2 standard.

* **Each numeric PFA can only cover one number?**

> PFA transitions are labeled by variables. Each assignment of the variables corresponds to a number.


### Reviewer D:

* **Wasting effort when considering larger PFAs iteratively.**

> Indeed, we consider this our future work.

